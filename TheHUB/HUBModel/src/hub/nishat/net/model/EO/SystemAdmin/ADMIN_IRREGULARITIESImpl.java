package hub.nishat.net.model.EO.SystemAdmin;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 21 09:49:29 PKT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ADMIN_IRREGULARITIESImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    @Override
    protected void doDML(int i, TransactionEvent transactionEvent) {
       
        super.doDML(i, transactionEvent);
    }

    @Override
    protected void prepareForDML(int i, TransactionEvent transactionEvent) {
        super.prepareForDML(i, transactionEvent);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        IrregularityId {
            public Object get(ADMIN_IRREGULARITIESImpl obj) {
                return obj.getIrregularityId();
            }

            public void put(ADMIN_IRREGULARITIESImpl obj, Object value) {
                obj.setIrregularityId((Number)value);
            }
        }
        ,
        EmpAtdId {
            public Object get(ADMIN_IRREGULARITIESImpl obj) {
                return obj.getEmpAtdId();
            }

            public void put(ADMIN_IRREGULARITIESImpl obj, Object value) {
                obj.setEmpAtdId((Number)value);
            }
        }
        ,
        AttendanceDate {
            public Object get(ADMIN_IRREGULARITIESImpl obj) {
                return obj.getAttendanceDate();
            }

            public void put(ADMIN_IRREGULARITIESImpl obj, Object value) {
                obj.setAttendanceDate((Date)value);
            }
        }
        ,
        Type {
            public Object get(ADMIN_IRREGULARITIESImpl obj) {
                return obj.getType();
            }

            public void put(ADMIN_IRREGULARITIESImpl obj, Object value) {
                obj.setType((String)value);
            }
        }
        ,
        ExceptionRemarks {
            public Object get(ADMIN_IRREGULARITIESImpl obj) {
                return obj.getExceptionRemarks();
            }

            public void put(ADMIN_IRREGULARITIESImpl obj, Object value) {
                obj.setExceptionRemarks((String)value);
            }
        }
        ,
        MinutesMissing {
            public Object get(ADMIN_IRREGULARITIESImpl obj) {
                return obj.getMinutesMissing();
            }

            public void put(ADMIN_IRREGULARITIESImpl obj, Object value) {
                obj.setMinutesMissing((Number)value);
            }
        }
        ,
        EmpId {
            public Object get(ADMIN_IRREGULARITIESImpl obj) {
                return obj.getEmpId();
            }

            public void put(ADMIN_IRREGULARITIESImpl obj, Object value) {
                obj.setEmpId((Number)value);
            }
        }
        ,
        ExceptionApproved {
            public Object get(ADMIN_IRREGULARITIESImpl obj) {
                return obj.getExceptionApproved();
            }

            public void put(ADMIN_IRREGULARITIESImpl obj, Object value) {
                obj.setExceptionApproved((String)value);
            }
        }
        ,
        LeaveType {
            public Object get(ADMIN_IRREGULARITIESImpl obj) {
                return obj.getLeaveType();
            }

            public void put(ADMIN_IRREGULARITIESImpl obj, Object value) {
                obj.setLeaveType((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(ADMIN_IRREGULARITIESImpl object);

        public abstract void put(ADMIN_IRREGULARITIESImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int IRREGULARITYID = AttributesEnum.IrregularityId.index();
    public static final int EMPATDID = AttributesEnum.EmpAtdId.index();
    public static final int ATTENDANCEDATE = AttributesEnum.AttendanceDate.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int EXCEPTIONREMARKS = AttributesEnum.ExceptionRemarks.index();
    public static final int MINUTESMISSING = AttributesEnum.MinutesMissing.index();
    public static final int EMPID = AttributesEnum.EmpId.index();
    public static final int EXCEPTIONAPPROVED = AttributesEnum.ExceptionApproved.index();
    public static final int LEAVETYPE = AttributesEnum.LeaveType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ADMIN_IRREGULARITIESImpl() {
    }

    /**
     * Gets the attribute value for IrregularityId, using the alias name IrregularityId.
     * @return the IrregularityId
     */
    public Number getIrregularityId() {
        return (Number)getAttributeInternal(IRREGULARITYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for IrregularityId.
     * @param value value to set the IrregularityId
     */
    public void setIrregularityId(Number value) {
        setAttributeInternal(IRREGULARITYID, value);
    }

    /**
     * Gets the attribute value for EmpAtdId, using the alias name EmpAtdId.
     * @return the EmpAtdId
     */
    public Number getEmpAtdId() {
        return (Number)getAttributeInternal(EMPATDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpAtdId.
     * @param value value to set the EmpAtdId
     */
    public void setEmpAtdId(Number value) {
        setAttributeInternal(EMPATDID, value);
    }

    /**
     * Gets the attribute value for AttendanceDate, using the alias name AttendanceDate.
     * @return the AttendanceDate
     */
    public Date getAttendanceDate() {
        return (Date)getAttributeInternal(ATTENDANCEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttendanceDate.
     * @param value value to set the AttendanceDate
     */
    public void setAttendanceDate(Date value) {
        setAttributeInternal(ATTENDANCEDATE, value);
    }

    /**
     * Gets the attribute value for Type, using the alias name Type.
     * @return the Type
     */
    public String getType() {
        return (String)getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Type.
     * @param value value to set the Type
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * Gets the attribute value for ExceptionRemarks, using the alias name ExceptionRemarks.
     * @return the ExceptionRemarks
     */
    public String getExceptionRemarks() {
        return (String)getAttributeInternal(EXCEPTIONREMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExceptionRemarks.
     * @param value value to set the ExceptionRemarks
     */
    public void setExceptionRemarks(String value) {
        setAttributeInternal(EXCEPTIONREMARKS, value);
    }

    /**
     * Gets the attribute value for MinutesMissing, using the alias name MinutesMissing.
     * @return the MinutesMissing
     */
    public Number getMinutesMissing() {
        return (Number)getAttributeInternal(MINUTESMISSING);
    }

    /**
     * Sets <code>value</code> as the attribute value for MinutesMissing.
     * @param value value to set the MinutesMissing
     */
    public void setMinutesMissing(Number value) {
        setAttributeInternal(MINUTESMISSING, value);
    }

    /**
     * Gets the attribute value for EmpId, using the alias name EmpId.
     * @return the EmpId
     */
    public Number getEmpId() {
        return (Number)getAttributeInternal(EMPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpId.
     * @param value value to set the EmpId
     */
    public void setEmpId(Number value) {
        setAttributeInternal(EMPID, value);
    }

    /**
     * Gets the attribute value for ExceptionApproved, using the alias name ExceptionApproved.
     * @return the ExceptionApproved
     */
    public String getExceptionApproved() {
        return (String)getAttributeInternal(EXCEPTIONAPPROVED);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExceptionApproved.
     * @param value value to set the ExceptionApproved
     */
    public void setExceptionApproved(String value) {
        setAttributeInternal(EXCEPTIONAPPROVED, value);
    }

    /**
     * Gets the attribute value for LeaveType, using the alias name LeaveType.
     * @return the LeaveType
     */
    public String getLeaveType() {
        return (String)getAttributeInternal(LEAVETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LeaveType.
     * @param value value to set the LeaveType
     */
    public void setLeaveType(String value) {
        setAttributeInternal(LEAVETYPE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param irregularityId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number irregularityId) {
        return new Key(new Object[]{irregularityId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("hub.nishat.net.model.EO.SystemAdmin.ADMIN_IRREGULARITIES");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        this.setIrregularityId(new SequenceImpl("xx_e_portal_irr_seq",
                                            getDBTransaction()).getSequenceNumber());
        
        
    }
}
