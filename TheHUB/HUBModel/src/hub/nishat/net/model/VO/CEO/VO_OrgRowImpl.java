package hub.nishat.net.model.VO.CEO;

import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 30 17:42:26 PKT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VO_OrgRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        HierarchyName {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getHierarchyName();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setHierarchyName((String)value);
            }
        }
        ,
        ParentPositionId {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getParentPositionId();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setParentPositionId((Number)value);
            }
        }
        ,
        FullNameParent {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getFullNameParent();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setFullNameParent((String)value);
            }
        }
        ,
        ParentPersonId {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getParentPersonId();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setParentPersonId((Number)value);
            }
        }
        ,
        ParentPosition {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getParentPosition();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setParentPosition((String)value);
            }
        }
        ,
        SubordinatePositionId {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getSubordinatePositionId();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setSubordinatePositionId((Number)value);
            }
        }
        ,
        ChildPosition {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getChildPosition();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setChildPosition((String)value);
            }
        }
        ,
        EmpCode {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getEmpCode();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setEmpCode((String)value);
            }
        }
        ,
        EmailAddress {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getEmailAddress();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setEmailAddress((String)value);
            }
        }
        ,
        Joining {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getJoining();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setJoining((String)value);
            }
        }
        ,
        FullNameChild {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getFullNameChild();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setFullNameChild((String)value);
            }
        }
        ,
        ChildPersonId {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getChildPersonId();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setChildPersonId((Number)value);
            }
        }
        ,
        ChildPersonIdVO_Org {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getChildPersonIdVO_Org();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VO_Departments1 {
            public Object get(VO_OrgRowImpl obj) {
                return obj.getVO_Departments1();
            }

            public void put(VO_OrgRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(VO_OrgRowImpl object);

        public abstract void put(VO_OrgRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int HIERARCHYNAME = AttributesEnum.HierarchyName.index();
    public static final int PARENTPOSITIONID = AttributesEnum.ParentPositionId.index();
    public static final int FULLNAMEPARENT = AttributesEnum.FullNameParent.index();
    public static final int PARENTPERSONID = AttributesEnum.ParentPersonId.index();
    public static final int PARENTPOSITION = AttributesEnum.ParentPosition.index();
    public static final int SUBORDINATEPOSITIONID = AttributesEnum.SubordinatePositionId.index();
    public static final int CHILDPOSITION = AttributesEnum.ChildPosition.index();
    public static final int EMPCODE = AttributesEnum.EmpCode.index();
    public static final int EMAILADDRESS = AttributesEnum.EmailAddress.index();
    public static final int JOINING = AttributesEnum.Joining.index();
    public static final int FULLNAMECHILD = AttributesEnum.FullNameChild.index();
    public static final int CHILDPERSONID = AttributesEnum.ChildPersonId.index();
    public static final int CHILDPERSONIDVO_ORG = AttributesEnum.ChildPersonIdVO_Org.index();
    public static final int VO_DEPARTMENTS1 = AttributesEnum.VO_Departments1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public VO_OrgRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute HierarchyName.
     * @return the HierarchyName
     */
    public String getHierarchyName() {
        return (String) getAttributeInternal(HIERARCHYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HierarchyName.
     * @param value value to set the  HierarchyName
     */
    public void setHierarchyName(String value) {
        setAttributeInternal(HIERARCHYNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParentPositionId.
     * @return the ParentPositionId
     */
    public Number getParentPositionId() {
        return (Number) getAttributeInternal(PARENTPOSITIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParentPositionId.
     * @param value value to set the  ParentPositionId
     */
    public void setParentPositionId(Number value) {
        setAttributeInternal(PARENTPOSITIONID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FullNameParent.
     * @return the FullNameParent
     */
    public String getFullNameParent() {
        return (String) getAttributeInternal(FULLNAMEPARENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FullNameParent.
     * @param value value to set the  FullNameParent
     */
    public void setFullNameParent(String value) {
        setAttributeInternal(FULLNAMEPARENT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParentPersonId.
     * @return the ParentPersonId
     */
    public Number getParentPersonId() {
        return (Number) getAttributeInternal(PARENTPERSONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParentPersonId.
     * @param value value to set the  ParentPersonId
     */
    public void setParentPersonId(Number value) {
        setAttributeInternal(PARENTPERSONID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParentPosition.
     * @return the ParentPosition
     */
    public String getParentPosition() {
        String position = (String) getAttributeInternal(PARENTPOSITION);
        String pos = position.split("-")[0]+position.split("-")[2];
        return pos;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParentPosition.
     * @param value value to set the  ParentPosition
     */
    public void setParentPosition(String value) {
        setAttributeInternal(PARENTPOSITION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SubordinatePositionId.
     * @return the SubordinatePositionId
     */
    public Number getSubordinatePositionId() {
        return (Number) getAttributeInternal(SUBORDINATEPOSITIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SubordinatePositionId.
     * @param value value to set the  SubordinatePositionId
     */
    public void setSubordinatePositionId(Number value) {
        setAttributeInternal(SUBORDINATEPOSITIONID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ChildPosition.
     * @return the ChildPosition
     */
    public String getChildPosition() {
        String pos = (String) getAttributeInternal(CHILDPOSITION);
        
        return pos.replace("0", " ").replace("2", " ").replace("-", " ") ;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ChildPosition.
     * @param value value to set the  ChildPosition
     */
    public void setChildPosition(String value) {
        setAttributeInternal(CHILDPOSITION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpCode.
     * @return the EmpCode
     */
    public String getEmpCode() {
        return (String) getAttributeInternal(EMPCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpCode.
     * @param value value to set the  EmpCode
     */
    public void setEmpCode(String value) {
        setAttributeInternal(EMPCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmailAddress.
     * @return the EmailAddress
     */
    public String getEmailAddress() {
        return (String) getAttributeInternal(EMAILADDRESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmailAddress.
     * @param value value to set the  EmailAddress
     */
    public void setEmailAddress(String value) {
        setAttributeInternal(EMAILADDRESS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Joining.
     * @return the Joining
     */
    public String getJoining() {
        return (String) getAttributeInternal(JOINING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Joining.
     * @param value value to set the  Joining
     */
    public void setJoining(String value) {
        setAttributeInternal(JOINING, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FullNameChild.
     * @return the FullNameChild
     */
    public String getFullNameChild() {
        return (String) getAttributeInternal(FULLNAMECHILD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FullNameChild.
     * @param value value to set the  FullNameChild
     */
    public void setFullNameChild(String value) {
        setAttributeInternal(FULLNAMECHILD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ChildPersonId.
     * @return the ChildPersonId
     */
    public Number getChildPersonId() {
        return (Number) getAttributeInternal(CHILDPERSONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ChildPersonId.
     * @param value value to set the  ChildPersonId
     */
    public void setChildPersonId(Number value) {
        setAttributeInternal(CHILDPERSONID, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link ChildPersonIdVO_Org.
     */
    public RowIterator getChildPersonIdVO_Org() {
        return (RowIterator)getAttributeInternal(CHILDPERSONIDVO_ORG);
    }

    /**
     * Gets the view accessor <code>RowSet</code> VO_Departments1.
     */
    public RowSet getVO_Departments1() {
        return (RowSet)getAttributeInternal(VO_DEPARTMENTS1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
