package hub.nishat.net.model.VO.Lov;

import java.util.Calendar;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import view.nishat.net.Helper.CommonUtil;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 08 17:46:40 PKT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class YearLovRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        TransactionDate {
            public Object get(YearLovRowImpl obj) {
                return obj.getTransactionDate();
            }

            public void put(YearLovRowImpl obj, Object value) {
                obj.setTransactionDate((Date)value);
            }
        }
        ,
        Year {
            public Object get(YearLovRowImpl obj) {
                return obj.getYear();
            }

            public void put(YearLovRowImpl obj, Object value) {
                obj.setYear((String)value);
            }
        }
        ,
        VO_Years1 {
            public Object get(YearLovRowImpl obj) {
                return obj.getVO_Years1();
            }

            public void put(YearLovRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(YearLovRowImpl object);

        public abstract void put(YearLovRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TRANSACTIONDATE = AttributesEnum.TransactionDate.index();
    public static final int YEAR = AttributesEnum.Year.index();
    public static final int VO_YEARS1 = AttributesEnum.VO_Years1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public YearLovRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute TransactionDate.
     * @return the TransactionDate
     */
    public Date getTransactionDate() {
        return (Date) getAttributeInternal(TRANSACTIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransactionDate.
     * @param value value to set the  TransactionDate
     */
    public void setTransactionDate(Date value) {
        setAttributeInternal(TRANSACTIONDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Year.
     * @return the Year
     */
    public String getYear() {
        String year =  (String) getAttributeInternal(YEAR);
        if (year == null ||year.trim().length() == 0) {
            return Calendar.getInstance().get(Calendar.YEAR)+"";
        }
        return year;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Year.
     * @param value value to set the  Year
     */
    public void setYear(String value) {
        setAttributeInternal(YEAR, value);
    }


    /**
     * Gets the view accessor <code>RowSet</code> VO_Years1.
     */
    public RowSet getVO_Years1() {
        return (RowSet)getAttributeInternal(VO_YEARS1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
