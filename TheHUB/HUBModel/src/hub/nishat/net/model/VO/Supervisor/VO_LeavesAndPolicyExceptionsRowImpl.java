package hub.nishat.net.model.VO.Supervisor;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 21 17:08:31 PKT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VO_LeavesAndPolicyExceptionsRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ChildPersonId {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getChildPersonId();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setChildPersonId((Number)value);
            }
        }
        ,
        FullNameChild {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getFullNameChild();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setFullNameChild((String)value);
            }
        }
        ,
        PolicyException {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getPolicyException();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setPolicyException((String)value);
            }
        }
        ,
        EmpAtdId {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getEmpAtdId();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setEmpAtdId((Number)value);
            }
        }
        ,
        EffectiveWorkedHours {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getEffectiveWorkedHours();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setEffectiveWorkedHours((String)value);
            }
        }
        ,
        AttendanceDate {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getAttendanceDate();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setAttendanceDate((Date)value);
            }
        }
        ,
        IsHalf {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getIsHalf();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setIsHalf((String)value);
            }
        }
        ,
        LeaveType {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getLeaveType();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setLeaveType((String)value);
            }
        }
        ,
        LeaveTypeId {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getLeaveTypeId();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setLeaveTypeId((Number)value);
            }
        }
        ,
        Type {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getType();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setType((String)value);
            }
        }
        ,
        PolicyExceptionApprovedFlag {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getPolicyExceptionApprovedFlag();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setPolicyExceptionApprovedFlag((String)value);
            }
        }
        ,
        LeaveApprovedFlag {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getLeaveApprovedFlag();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setLeaveApprovedFlag((String)value);
            }
        }
        ,
        RemainingAnnual {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getRemainingAnnual();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setRemainingAnnual((Number)value);
            }
        }
        ,
        RemainingCasual {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getRemainingCasual();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setRemainingCasual((Number)value);
            }
        }
        ,
        policy_exception_approved {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getpolicy_exception_approved();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setpolicy_exception_approved((Boolean)value);
            }
        }
        ,
        leave_approved_flag {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getleave_approved_flag();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setleave_approved_flag((Boolean)value);
            }
        }
        ,
        Approve {
            public Object get(VO_LeavesAndPolicyExceptionsRowImpl obj) {
                return obj.getApprove();
            }

            public void put(VO_LeavesAndPolicyExceptionsRowImpl obj,
                            Object value) {
                obj.setApprove((Boolean)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(VO_LeavesAndPolicyExceptionsRowImpl object);

        public abstract void put(VO_LeavesAndPolicyExceptionsRowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CHILDPERSONID = AttributesEnum.ChildPersonId.index();
    public static final int FULLNAMECHILD = AttributesEnum.FullNameChild.index();
    public static final int POLICYEXCEPTION = AttributesEnum.PolicyException.index();
    public static final int EMPATDID = AttributesEnum.EmpAtdId.index();
    public static final int EFFECTIVEWORKEDHOURS = AttributesEnum.EffectiveWorkedHours.index();
    public static final int ATTENDANCEDATE = AttributesEnum.AttendanceDate.index();
    public static final int ISHALF = AttributesEnum.IsHalf.index();
    public static final int LEAVETYPE = AttributesEnum.LeaveType.index();
    public static final int LEAVETYPEID = AttributesEnum.LeaveTypeId.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int POLICYEXCEPTIONAPPROVEDFLAG = AttributesEnum.PolicyExceptionApprovedFlag.index();
    public static final int LEAVEAPPROVEDFLAG = AttributesEnum.LeaveApprovedFlag.index();
    public static final int REMAININGANNUAL = AttributesEnum.RemainingAnnual.index();
    public static final int REMAININGCASUAL = AttributesEnum.RemainingCasual.index();
    public static final int POLICY_EXCEPTION_APPROVED = AttributesEnum.policy_exception_approved.index();
    public static final int LEAVE_APPROVED_FLAG = AttributesEnum.leave_approved_flag.index();
    public static final int APPROVE = AttributesEnum.Approve.index();

    /**
     * This is the default constructor (do not remove).
     */
    public VO_LeavesAndPolicyExceptionsRowImpl() {
    }

    /**
     * Gets EO_Attendance entity object.
     * @return the EO_Attendance
     */
    public EntityImpl getEO_Attendance() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for the calculated attribute ChildPersonId.
     * @return the ChildPersonId
     */
    public Number getChildPersonId() {
        return (Number)getAttributeInternal(CHILDPERSONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ChildPersonId.
     * @param value value to set the  ChildPersonId
     */
    public void setChildPersonId(Number value) {
        setAttributeInternal(CHILDPERSONID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FullNameChild.
     * @return the FullNameChild
     */
    public String getFullNameChild() {
        return (String)getAttributeInternal(FULLNAMECHILD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FullNameChild.
     * @param value value to set the  FullNameChild
     */
    public void setFullNameChild(String value) {
        setAttributeInternal(FULLNAMECHILD, value);
    }

    /**
     * Gets the attribute value for POLICY_EXCEPTION using the alias name PolicyException.
     * @return the POLICY_EXCEPTION
     */
    public String getPolicyException() {
        return (String)getAttributeInternal(POLICYEXCEPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for POLICY_EXCEPTION using the alias name PolicyException.
     * @param value value to set the POLICY_EXCEPTION
     */
    public void setPolicyException(String value) {
        setAttributeInternal(POLICYEXCEPTION, value);
    }

    /**
     * Gets the attribute value for EMP_ATD_ID using the alias name EmpAtdId.
     * @return the EMP_ATD_ID
     */
    public Number getEmpAtdId() {
        return (Number)getAttributeInternal(EMPATDID);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_ATD_ID using the alias name EmpAtdId.
     * @param value value to set the EMP_ATD_ID
     */
    public void setEmpAtdId(Number value) {
        setAttributeInternal(EMPATDID, value);
    }

    /**
     * Gets the attribute value for EFFECTIVE_WORKED_HOURS using the alias name EffectiveWorkedHours.
     * @return the EFFECTIVE_WORKED_HOURS
     */
    public String getEffectiveWorkedHours() {
        return (String)getAttributeInternal(EFFECTIVEWORKEDHOURS);
    }

    /**
     * Sets <code>value</code> as attribute value for EFFECTIVE_WORKED_HOURS using the alias name EffectiveWorkedHours.
     * @param value value to set the EFFECTIVE_WORKED_HOURS
     */
    public void setEffectiveWorkedHours(String value) {
        setAttributeInternal(EFFECTIVEWORKEDHOURS, value);
    }

    /**
     * Gets the attribute value for ATTENDANCE_DATE using the alias name AttendanceDate.
     * @return the ATTENDANCE_DATE
     */
    public Date getAttendanceDate() {
        return (Date)getAttributeInternal(ATTENDANCEDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for ATTENDANCE_DATE using the alias name AttendanceDate.
     * @param value value to set the ATTENDANCE_DATE
     */
    public void setAttendanceDate(Date value) {
        setAttributeInternal(ATTENDANCEDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IsHalf.
     * @return the IsHalf
     */
    public String getIsHalf() {
        return (String) getAttributeInternal(ISHALF);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IsHalf.
     * @param value value to set the  IsHalf
     */
    public void setIsHalf(String value) {
        setAttributeInternal(ISHALF, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LeaveType.
     * @return the LeaveType
     */
    public String getLeaveType() {
        return (String)getAttributeInternal(LEAVETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LeaveType.
     * @param value value to set the  LeaveType
     */
    public void setLeaveType(String value) {
        setAttributeInternal(LEAVETYPE, value);
    }


    /**
     * Gets the attribute value for LEAVE_TYPE_ID using the alias name LeaveTypeId.
     * @return the LEAVE_TYPE_ID
     */
    public Number getLeaveTypeId() {
        return (Number)getAttributeInternal(LEAVETYPEID);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVE_TYPE_ID using the alias name LeaveTypeId.
     * @param value value to set the LEAVE_TYPE_ID
     */
    public void setLeaveTypeId(Number value) {
        setAttributeInternal(LEAVETYPEID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Type.
     * @return the Type
     */
    public String getType() {
        return (String)getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Type.
     * @param value value to set the  Type
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * Gets the attribute value for POLICY_EXCEPTION_APPROVED_FLAG using the alias name PolicyExceptionApprovedFlag.
     * @return the POLICY_EXCEPTION_APPROVED_FLAG
     */
    public String getPolicyExceptionApprovedFlag() {
        return (String)getAttributeInternal(POLICYEXCEPTIONAPPROVEDFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for POLICY_EXCEPTION_APPROVED_FLAG using the alias name PolicyExceptionApprovedFlag.
     * @param value value to set the POLICY_EXCEPTION_APPROVED_FLAG
     */
    public void setPolicyExceptionApprovedFlag(String value) {
        setAttributeInternal(POLICYEXCEPTIONAPPROVEDFLAG, value);
    }

    /**
     * Gets the attribute value for LEAVE_APPROVED_FLAG using the alias name LeaveApprovedFlag.
     * @return the LEAVE_APPROVED_FLAG
     */
    public String getLeaveApprovedFlag() {
        return (String)getAttributeInternal(LEAVEAPPROVEDFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVE_APPROVED_FLAG using the alias name LeaveApprovedFlag.
     * @param value value to set the LEAVE_APPROVED_FLAG
     */
    public void setLeaveApprovedFlag(String value) {
        setAttributeInternal(LEAVEAPPROVEDFLAG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RemainingAnnual.
     * @return the RemainingAnnual
     */
    public Number getRemainingAnnual() {
        return (Number)getAttributeInternal(REMAININGANNUAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RemainingAnnual.
     * @param value value to set the  RemainingAnnual
     */
    public void setRemainingAnnual(Number value) {
        setAttributeInternal(REMAININGANNUAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RemainingCasual.
     * @return the RemainingCasual
     */
    public Number getRemainingCasual() {
        return (Number)getAttributeInternal(REMAININGCASUAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RemainingCasual.
     * @param value value to set the  RemainingCasual
     */
    public void setRemainingCasual(Number value) {
        setAttributeInternal(REMAININGCASUAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute policy_exception_approved.
     * @return the policy_exception_approved
     */
    public Boolean getpolicy_exception_approved() {
        boolean approved = false;
        if (getPolicyExceptionApprovedFlag() == null) {
            return null;
        }
        if (getPolicyExceptionApprovedFlag().equals("N")) {
            System.out.println("Exception approved: N");
            approved = false;
        } else if (getPolicyExceptionApprovedFlag().equals("Y")) {
            System.out.println("Exception approved: Y");
            approved = true;
        }
        return approved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute policy_exception_approved.
     * @param value value to set the  policy_exception_approved
     */
    public void setpolicy_exception_approved(Boolean value) {
        if (getPolicyExceptionApprovedFlag() != null) {
            if (value) {
                setPolicyExceptionApprovedFlag("Y");
            } else {
                setPolicyExceptionApprovedFlag("N");
            }
        }
    }

    /**
     * Gets the attribute value for the calculated attribute leave_approved_flag.
     * @return the leave_approved_flag
     */
    public Boolean getleave_approved_flag() {
        boolean approved = false;
        if (getLeaveApprovedFlag() == null) {
            return null;
        }
        if (getLeaveApprovedFlag().equals("N")) {
            System.out.println("Exception approved: N");
            approved = false;
        } else if (getLeaveApprovedFlag().equals("Y")) {
            System.out.println("Exception approved: Y");
            approved = true;
        }
        return approved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute leave_approved_flag.
     * @param value value to set the  leave_approved_flag
     */
    public void setleave_approved_flag(Boolean value) {
        if (getLeaveApprovedFlag() != null) {
            if (value) {
                setLeaveApprovedFlag("Y");
            } else {
                setLeaveApprovedFlag("N");
            }
        }
    }

    /**
     * Gets the attribute value for the calculated attribute Approve.
     * @return the Approve
     */
    public Boolean getApprove() {
        boolean approved = false;
        if (getPolicyExceptionApprovedFlag() != null) {
            if (getPolicyExceptionApprovedFlag().equals("Y")) {
                approved = true;
            } else if (getPolicyExceptionApprovedFlag().equals("N")) {
                approved = false;
            }
        } else if (getLeaveApprovedFlag() != null) {
            if (getLeaveApprovedFlag().equals("Y")) {
                approved = true;
            } else if (getLeaveApprovedFlag().equals("N")) {
                approved = false;
            }
        } else {
            return null;
        }
        return approved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Approve.
     * @param value value to set the  Approve
     */
    public void setApprove(Boolean value) {
        if (value) {
            if (getPolicyExceptionApprovedFlag() != null) {
                setPolicyExceptionApprovedFlag("Y");
            } else if (getLeaveApprovedFlag() != null) {
                setLeaveApprovedFlag("Y");
            }
        } else {
            if (getPolicyExceptionApprovedFlag() != null) {
                setPolicyExceptionApprovedFlag("N");
            } else if (getLeaveApprovedFlag() != null) {
                setLeaveApprovedFlag("N");
            }
        }
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
