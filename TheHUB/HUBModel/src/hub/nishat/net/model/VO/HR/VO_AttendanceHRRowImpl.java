package hub.nishat.net.model.VO.HR;

import java.math.BigDecimal;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 05 16:05:43 PKT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VO_AttendanceHRRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        EmpPostedFlag {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getEmpPostedFlag();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setEmpPostedFlag((String)value);
            }
        }
        ,
        Isexception {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getIsexception();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setIsexception((String)value);
            }
        }
        ,
        EmpAtdId {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getEmpAtdId();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setEmpAtdId((Number)value);
            }
        }
        ,
        Description {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getDescription();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ,
        DayOfWeek {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getDayOfWeek();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setDayOfWeek((String)value);
            }
        }
        ,
        EmpId {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getEmpId();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setEmpId((Number)value);
            }
        }
        ,
        EmpName {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getEmpName();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setEmpName((String)value);
            }
        }
        ,
        CardNum {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getCardNum();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setCardNum((String)value);
            }
        }
        ,
        ExpectedWorkHours {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getExpectedWorkHours();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setExpectedWorkHours((String)value);
            }
        }
        ,
        MinInTime {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getMinInTime();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setMinInTime((Date)value);
            }
        }
        ,
        MaxOutTime {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getMaxOutTime();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setMaxOutTime((Date)value);
            }
        }
        ,
        Total {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getTotal();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setTotal((String)value);
            }
        }
        ,
        Intime {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getIntime();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setIntime((String)value);
            }
        }
        ,
        Outtime {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getOuttime();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setOuttime((String)value);
            }
        }
        ,
        EffectiveWorkedHours {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getEffectiveWorkedHours();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setEffectiveWorkedHours((String)value);
            }
        }
        ,
        MaxStartTime {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getMaxStartTime();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setMaxStartTime((String)value);
            }
        }
        ,
        MaxEndTime {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getMaxEndTime();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setMaxEndTime((String)value);
            }
        }
        ,
        EndTime {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getEndTime();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setEndTime((String)value);
            }
        }
        ,
        StartTime {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getStartTime();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setStartTime((String)value);
            }
        }
        ,
        AttendanceDate {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getAttendanceDate();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAttendanceDate((Date)value);
            }
        }
        ,
        Day {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getDay();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setDay((String)value);
            }
        }
        ,
        LeaveTypeId {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getLeaveTypeId();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setLeaveTypeId((Number)value);
            }
        }
        ,
        LeaveApprovedFlag {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getLeaveApprovedFlag();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setLeaveApprovedFlag((String)value);
            }
        }
        ,
        PolicyException {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getPolicyException();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setPolicyException((String)value);
            }
        }
        ,
        PolicyExceptionApprovedFlag {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getPolicyExceptionApprovedFlag();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setPolicyExceptionApprovedFlag((String)value);
            }
        }
        ,
        IsHalf {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getIsHalf();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setIsHalf((String)value);
            }
        }
        ,
        LeaveToday {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getLeaveToday();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setLeaveToday((String)value);
            }
        }
        ,
        TypeOfLeave {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getTypeOfLeave();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setTypeOfLeave((Number)value);
            }
        }
        ,
        LeaveCancelled {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getLeaveCancelled();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setLeaveCancelled((String)value);
            }
        }
        ,
        EmpType {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getEmpType();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setEmpType((Number)value);
            }
        }
        ,
        WorkingTime {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getWorkingTime();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setWorkingTime((String)value);
            }
        }
        ,
        Month {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getMonth();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setMonth((String)value);
            }
        }
        ,
        Year {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getYear();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setYear((String)value);
            }
        }
        ,
        MonthCode {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getMonthCode();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setMonthCode((String)value);
            }
        }
        ,
        ShortLeavesColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getShortLeavesColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setShortLeavesColumn((BigDecimal)value);
            }
        }
        ,
        HalfCasualApprovedColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getHalfCasualApprovedColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setHalfCasualApprovedColumn((BigDecimal)value);
            }
        }
        ,
        HalfCasualDisapprovedColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getHalfCasualDisapprovedColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setHalfCasualDisapprovedColumn((BigDecimal)value);
            }
        }
        ,
        HalfCasualPendingColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getHalfCasualPendingColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setHalfCasualPendingColumn((BigDecimal)value);
            }
        }
        ,
        CasualApprovedColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getCasualApprovedColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setCasualApprovedColumn((BigDecimal)value);
            }
        }
        ,
        CasualDisapprovedColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getCasualDisapprovedColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setCasualDisapprovedColumn((BigDecimal)value);
            }
        }
        ,
        CasualPendingColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getCasualPendingColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setCasualPendingColumn((BigDecimal)value);
            }
        }
        ,
        HalfAnnualApprovedColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getHalfAnnualApprovedColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setHalfAnnualApprovedColumn((BigDecimal)value);
            }
        }
        ,
        HalfAnnualDisapprovedColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getHalfAnnualDisapprovedColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setHalfAnnualDisapprovedColumn((BigDecimal)value);
            }
        }
        ,
        HalfAnnualPendingColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getHalfAnnualPendingColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setHalfAnnualPendingColumn((BigDecimal)value);
            }
        }
        ,
        AnnualApprovedColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getAnnualApprovedColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAnnualApprovedColumn((BigDecimal)value);
            }
        }
        ,
        AnnualDisapprovedColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getAnnualDisapprovedColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAnnualDisapprovedColumn((BigDecimal)value);
            }
        }
        ,
        AnnualPendingColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getAnnualPendingColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAnnualPendingColumn((BigDecimal)value);
            }
        }
        ,
        ExceptionApprovedColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getExceptionApprovedColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setExceptionApprovedColumn((BigDecimal)value);
            }
        }
        ,
        ExceptionDisapprovedColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getExceptionDisapprovedColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setExceptionDisapprovedColumn((BigDecimal)value);
            }
        }
        ,
        ExceptionPendingColumn {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getExceptionPendingColumn();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setExceptionPendingColumn((BigDecimal)value);
            }
        }
        ,
        Remarks {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getRemarks();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setRemarks((String)value);
            }
        }
        ,
        saturdayOrHoliday {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getsaturdayOrHoliday();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setsaturdayOrHoliday((String)value);
            }
        }
        ,
        isSunday {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getisSunday();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setisSunday((String)value);
            }
        }
        ,
        isLeave {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getisLeave();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setisLeave((String)value);
            }
        }
        ,
        MissingTime {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getMissingTime();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setMissingTime((String)value);
            }
        }
        ,
        VO_ActiveEmployees {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getVO_ActiveEmployees();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VO_ConsumedLeaves {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getVO_ConsumedLeaves();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VO_EmpIRR {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getVO_EmpIRR();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VO_PARTTIMES {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getVO_PARTTIMES();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VO_MISSING_MINUTES {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getVO_MISSING_MINUTES();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        YearLov1 {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getYearLov1();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VO_Months1 {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getVO_Months1();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        VO_Years1 {
            public Object get(VO_AttendanceHRRowImpl obj) {
                return obj.getVO_Years1();
            }

            public void put(VO_AttendanceHRRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(VO_AttendanceHRRowImpl object);

        public abstract void put(VO_AttendanceHRRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EMPPOSTEDFLAG = AttributesEnum.EmpPostedFlag.index();
    public static final int ISEXCEPTION = AttributesEnum.Isexception.index();
    public static final int EMPATDID = AttributesEnum.EmpAtdId.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int DAYOFWEEK = AttributesEnum.DayOfWeek.index();
    public static final int EMPID = AttributesEnum.EmpId.index();
    public static final int EMPNAME = AttributesEnum.EmpName.index();
    public static final int CARDNUM = AttributesEnum.CardNum.index();
    public static final int EXPECTEDWORKHOURS = AttributesEnum.ExpectedWorkHours.index();
    public static final int MININTIME = AttributesEnum.MinInTime.index();
    public static final int MAXOUTTIME = AttributesEnum.MaxOutTime.index();
    public static final int TOTAL = AttributesEnum.Total.index();
    public static final int INTIME = AttributesEnum.Intime.index();
    public static final int OUTTIME = AttributesEnum.Outtime.index();
    public static final int EFFECTIVEWORKEDHOURS = AttributesEnum.EffectiveWorkedHours.index();
    public static final int MAXSTARTTIME = AttributesEnum.MaxStartTime.index();
    public static final int MAXENDTIME = AttributesEnum.MaxEndTime.index();
    public static final int ENDTIME = AttributesEnum.EndTime.index();
    public static final int STARTTIME = AttributesEnum.StartTime.index();
    public static final int ATTENDANCEDATE = AttributesEnum.AttendanceDate.index();
    public static final int DAY = AttributesEnum.Day.index();
    public static final int LEAVETYPEID = AttributesEnum.LeaveTypeId.index();
    public static final int LEAVEAPPROVEDFLAG = AttributesEnum.LeaveApprovedFlag.index();
    public static final int POLICYEXCEPTION = AttributesEnum.PolicyException.index();
    public static final int POLICYEXCEPTIONAPPROVEDFLAG = AttributesEnum.PolicyExceptionApprovedFlag.index();
    public static final int ISHALF = AttributesEnum.IsHalf.index();
    public static final int LEAVETODAY = AttributesEnum.LeaveToday.index();
    public static final int TYPEOFLEAVE = AttributesEnum.TypeOfLeave.index();
    public static final int LEAVECANCELLED = AttributesEnum.LeaveCancelled.index();
    public static final int EMPTYPE = AttributesEnum.EmpType.index();
    public static final int WORKINGTIME = AttributesEnum.WorkingTime.index();
    public static final int MONTH = AttributesEnum.Month.index();
    public static final int YEAR = AttributesEnum.Year.index();
    public static final int MONTHCODE = AttributesEnum.MonthCode.index();
    public static final int SHORTLEAVESCOLUMN = AttributesEnum.ShortLeavesColumn.index();
    public static final int HALFCASUALAPPROVEDCOLUMN = AttributesEnum.HalfCasualApprovedColumn.index();
    public static final int HALFCASUALDISAPPROVEDCOLUMN = AttributesEnum.HalfCasualDisapprovedColumn.index();
    public static final int HALFCASUALPENDINGCOLUMN = AttributesEnum.HalfCasualPendingColumn.index();
    public static final int CASUALAPPROVEDCOLUMN = AttributesEnum.CasualApprovedColumn.index();
    public static final int CASUALDISAPPROVEDCOLUMN = AttributesEnum.CasualDisapprovedColumn.index();
    public static final int CASUALPENDINGCOLUMN = AttributesEnum.CasualPendingColumn.index();
    public static final int HALFANNUALAPPROVEDCOLUMN = AttributesEnum.HalfAnnualApprovedColumn.index();
    public static final int HALFANNUALDISAPPROVEDCOLUMN = AttributesEnum.HalfAnnualDisapprovedColumn.index();
    public static final int HALFANNUALPENDINGCOLUMN = AttributesEnum.HalfAnnualPendingColumn.index();
    public static final int ANNUALAPPROVEDCOLUMN = AttributesEnum.AnnualApprovedColumn.index();
    public static final int ANNUALDISAPPROVEDCOLUMN = AttributesEnum.AnnualDisapprovedColumn.index();
    public static final int ANNUALPENDINGCOLUMN = AttributesEnum.AnnualPendingColumn.index();
    public static final int EXCEPTIONAPPROVEDCOLUMN = AttributesEnum.ExceptionApprovedColumn.index();
    public static final int EXCEPTIONDISAPPROVEDCOLUMN = AttributesEnum.ExceptionDisapprovedColumn.index();
    public static final int EXCEPTIONPENDINGCOLUMN = AttributesEnum.ExceptionPendingColumn.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int SATURDAYORHOLIDAY = AttributesEnum.saturdayOrHoliday.index();
    public static final int ISSUNDAY = AttributesEnum.isSunday.index();
    public static final int ISLEAVE = AttributesEnum.isLeave.index();
    public static final int MISSINGTIME = AttributesEnum.MissingTime.index();
    public static final int VO_ACTIVEEMPLOYEES = AttributesEnum.VO_ActiveEmployees.index();
    public static final int VO_CONSUMEDLEAVES = AttributesEnum.VO_ConsumedLeaves.index();
    public static final int VO_EMPIRR = AttributesEnum.VO_EmpIRR.index();
    public static final int VO_PARTTIMES = AttributesEnum.VO_PARTTIMES.index();
    public static final int VO_MISSING_MINUTES = AttributesEnum.VO_MISSING_MINUTES.index();
    public static final int YEARLOV1 = AttributesEnum.YearLov1.index();
    public static final int VO_MONTHS1 = AttributesEnum.VO_Months1.index();
    public static final int VO_YEARS1 = AttributesEnum.VO_Years1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public VO_AttendanceHRRowImpl() {
    }

    /**
     * Gets EO_AttendanceHR entity object.
     * @return the EO_AttendanceHR
     */
    public EntityImpl getEO_AttendanceHR() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpPostedFlag.
     * @return the EmpPostedFlag
     */
    public String getEmpPostedFlag() {
        return (String) getAttributeInternal(EMPPOSTEDFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpPostedFlag.
     * @param value value to set the  EmpPostedFlag
     */
    public void setEmpPostedFlag(String value) {
        setAttributeInternal(EMPPOSTEDFLAG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Isexception.
     * @return the Isexception
     */
    public String getIsexception() {
        return (String) getAttributeInternal(ISEXCEPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Isexception.
     * @param value value to set the  Isexception
     */
    public void setIsexception(String value) {
        setAttributeInternal(ISEXCEPTION, value);
    }


    /**
     * Gets the attribute value for EMP_ATD_ID using the alias name EmpAtdId.
     * @return the EMP_ATD_ID
     */
    public Number getEmpAtdId() {
        return (Number)getAttributeInternal(EMPATDID);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_ATD_ID using the alias name EmpAtdId.
     * @param value value to set the EMP_ATD_ID
     */
    public void setEmpAtdId(Number value) {
        setAttributeInternal(EMPATDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Description.
     * @return the Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Description.
     * @param value value to set the  Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DayOfWeek.
     * @return the DayOfWeek
     */
    public String getDayOfWeek() {
        return (String) getAttributeInternal(DAYOFWEEK);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DayOfWeek.
     * @param value value to set the  DayOfWeek
     */
    public void setDayOfWeek(String value) {
        setAttributeInternal(DAYOFWEEK, value);
    }

    /**
     * Gets the attribute value for EMP_ID using the alias name EmpId.
     * @return the EMP_ID
     */
    public Number getEmpId() {
        return (Number)getAttributeInternal(EMPID);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_ID using the alias name EmpId.
     * @param value value to set the EMP_ID
     */
    public void setEmpId(Number value) {
        setAttributeInternal(EMPID, value);
    }

    /**
     * Gets the attribute value for EMP_NAME using the alias name EmpName.
     * @return the EMP_NAME
     */
    public String getEmpName() {
        return (String)getAttributeInternal(EMPNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_NAME using the alias name EmpName.
     * @param value value to set the EMP_NAME
     */
    public void setEmpName(String value) {
        setAttributeInternal(EMPNAME, value);
    }

    /**
     * Gets the attribute value for CARD_NUM using the alias name CardNum.
     * @return the CARD_NUM
     */
    public String getCardNum() {
        return (String)getAttributeInternal(CARDNUM);
    }

    /**
     * Sets <code>value</code> as attribute value for CARD_NUM using the alias name CardNum.
     * @param value value to set the CARD_NUM
     */
    public void setCardNum(String value) {
        setAttributeInternal(CARDNUM, value);
    }

    /**
     * Gets the attribute value for EXPECTED_WORK_HOURS using the alias name ExpectedWorkHours.
     * @return the EXPECTED_WORK_HOURS
     */
    public String getExpectedWorkHours() {
        return (String)getAttributeInternal(EXPECTEDWORKHOURS);
    }

    /**
     * Sets <code>value</code> as attribute value for EXPECTED_WORK_HOURS using the alias name ExpectedWorkHours.
     * @param value value to set the EXPECTED_WORK_HOURS
     */
    public void setExpectedWorkHours(String value) {
        setAttributeInternal(EXPECTEDWORKHOURS, value);
    }

    /**
     * Gets the attribute value for MIN_IN_TIME using the alias name MinInTime.
     * @return the MIN_IN_TIME
     */
    public Date getMinInTime() {
        return (Date)getAttributeInternal(MININTIME);
    }

    /**
     * Sets <code>value</code> as attribute value for MIN_IN_TIME using the alias name MinInTime.
     * @param value value to set the MIN_IN_TIME
     */
    public void setMinInTime(Date value) {
        setAttributeInternal(MININTIME, value);
    }

    /**
     * Gets the attribute value for MAX_OUT_TIME using the alias name MaxOutTime.
     * @return the MAX_OUT_TIME
     */
    public Date getMaxOutTime() {
        return (Date)getAttributeInternal(MAXOUTTIME);
    }

    /**
     * Sets <code>value</code> as attribute value for MAX_OUT_TIME using the alias name MaxOutTime.
     * @param value value to set the MAX_OUT_TIME
     */
    public void setMaxOutTime(Date value) {
        setAttributeInternal(MAXOUTTIME, value);
    }


    /**
     * Gets the attribute value for the calculated attribute Total.
     * @return the Total
     */
    public String getTotal() {
        String time = (String) getAttributeInternal(TOTAL);
        if (time!=null)
        {
            if (time.split(":")[0].equals("08")) return "08:00";
            else return time;
        }
        else return null;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Total.
     * @param value value to set the  Total
     */
    public void setTotal(String value) {
        setAttributeInternal(TOTAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Intime.
     * @return the Intime
     */
    public String getIntime() {
        return (String) getAttributeInternal(INTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Intime.
     * @param value value to set the  Intime
     */
    public void setIntime(String value) {
        setAttributeInternal(INTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Outtime.
     * @return the Outtime
     */
    public String getOuttime() {
        return (String) getAttributeInternal(OUTTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Outtime.
     * @param value value to set the  Outtime
     */
    public void setOuttime(String value) {
        setAttributeInternal(OUTTIME, value);
    }

    /**
     * Gets the attribute value for EFFECTIVE_WORKED_HOURS using the alias name EffectiveWorkedHours.
     * @return the EFFECTIVE_WORKED_HOURS
     */
    public String getEffectiveWorkedHours() {
        return (String)getAttributeInternal(EFFECTIVEWORKEDHOURS);
    }

    /**
     * Sets <code>value</code> as attribute value for EFFECTIVE_WORKED_HOURS using the alias name EffectiveWorkedHours.
     * @param value value to set the EFFECTIVE_WORKED_HOURS
     */
    public void setEffectiveWorkedHours(String value) {
        setAttributeInternal(EFFECTIVEWORKEDHOURS, value);
    }

    /**
     * Gets the attribute value for MAX_START_TIME using the alias name MaxStartTime.
     * @return the MAX_START_TIME
     */
    public String getMaxStartTime() {
        return (String)getAttributeInternal(MAXSTARTTIME);
    }

    /**
     * Sets <code>value</code> as attribute value for MAX_START_TIME using the alias name MaxStartTime.
     * @param value value to set the MAX_START_TIME
     */
    public void setMaxStartTime(String value) {
        setAttributeInternal(MAXSTARTTIME, value);
    }

    /**
     * Gets the attribute value for MAX_END_TIME using the alias name MaxEndTime.
     * @return the MAX_END_TIME
     */
    public String getMaxEndTime() {
        return (String)getAttributeInternal(MAXENDTIME);
    }

    /**
     * Sets <code>value</code> as attribute value for MAX_END_TIME using the alias name MaxEndTime.
     * @param value value to set the MAX_END_TIME
     */
    public void setMaxEndTime(String value) {
        setAttributeInternal(MAXENDTIME, value);
    }

    /**
     * Gets the attribute value for END_TIME using the alias name EndTime.
     * @return the END_TIME
     */
    public String getEndTime() {
        return (String)getAttributeInternal(ENDTIME);
    }

    /**
     * Sets <code>value</code> as attribute value for END_TIME using the alias name EndTime.
     * @param value value to set the END_TIME
     */
    public void setEndTime(String value) {
        setAttributeInternal(ENDTIME, value);
    }

    /**
     * Gets the attribute value for START_TIME using the alias name StartTime.
     * @return the START_TIME
     */
    public String getStartTime() {
        return (String)getAttributeInternal(STARTTIME);
    }

    /**
     * Sets <code>value</code> as attribute value for START_TIME using the alias name StartTime.
     * @param value value to set the START_TIME
     */
    public void setStartTime(String value) {
        setAttributeInternal(STARTTIME, value);
    }

    /**
     * Gets the attribute value for ATTENDANCE_DATE using the alias name AttendanceDate.
     * @return the ATTENDANCE_DATE
     */
    public Date getAttendanceDate() {
        return (Date)getAttributeInternal(ATTENDANCEDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for ATTENDANCE_DATE using the alias name AttendanceDate.
     * @param value value to set the ATTENDANCE_DATE
     */
    public void setAttendanceDate(Date value) {
        setAttributeInternal(ATTENDANCEDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Day.
     * @return the Day
     */
    public String getDay() {
        return (String) getAttributeInternal(DAY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Day.
     * @param value value to set the  Day
     */
    public void setDay(String value) {
        setAttributeInternal(DAY, value);
    }

    /**
     * Gets the attribute value for LEAVE_TYPE_ID using the alias name LeaveTypeId.
     * @return the LEAVE_TYPE_ID
     */
    public Number getLeaveTypeId() {
        return (Number)getAttributeInternal(LEAVETYPEID);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVE_TYPE_ID using the alias name LeaveTypeId.
     * @param value value to set the LEAVE_TYPE_ID
     */
    public void setLeaveTypeId(Number value) {
        setAttributeInternal(LEAVETYPEID, value);
    }

    /**
     * Gets the attribute value for LEAVE_APPROVED_FLAG using the alias name LeaveApprovedFlag.
     * @return the LEAVE_APPROVED_FLAG
     */
    public String getLeaveApprovedFlag() {
        return (String)getAttributeInternal(LEAVEAPPROVEDFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVE_APPROVED_FLAG using the alias name LeaveApprovedFlag.
     * @param value value to set the LEAVE_APPROVED_FLAG
     */
    public void setLeaveApprovedFlag(String value) {
        setAttributeInternal(LEAVEAPPROVEDFLAG, value);
    }

    /**
     * Gets the attribute value for POLICY_EXCEPTION using the alias name PolicyException.
     * @return the POLICY_EXCEPTION
     */
    public String getPolicyException() {
        return (String)getAttributeInternal(POLICYEXCEPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for POLICY_EXCEPTION using the alias name PolicyException.
     * @param value value to set the POLICY_EXCEPTION
     */
    public void setPolicyException(String value) {
        setAttributeInternal(POLICYEXCEPTION, value);
    }

    /**
     * Gets the attribute value for POLICY_EXCEPTION_APPROVED_FLAG using the alias name PolicyExceptionApprovedFlag.
     * @return the POLICY_EXCEPTION_APPROVED_FLAG
     */
    public String getPolicyExceptionApprovedFlag() {
        return (String)getAttributeInternal(POLICYEXCEPTIONAPPROVEDFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for POLICY_EXCEPTION_APPROVED_FLAG using the alias name PolicyExceptionApprovedFlag.
     * @param value value to set the POLICY_EXCEPTION_APPROVED_FLAG
     */
    public void setPolicyExceptionApprovedFlag(String value) {
        setAttributeInternal(POLICYEXCEPTIONAPPROVEDFLAG, value);
    }

    /**
     * Gets the attribute value for IS_HALF using the alias name IsHalf.
     * @return the IS_HALF
     */
    public String getIsHalf() {
        return (String)getAttributeInternal(ISHALF);
    }

    /**
     * Sets <code>value</code> as attribute value for IS_HALF using the alias name IsHalf.
     * @param value value to set the IS_HALF
     */
    public void setIsHalf(String value) {
        setAttributeInternal(ISHALF, value);
    }


    /**
     * Gets the attribute value for the calculated attribute Month.
     * @return the Month
     */
    public String getMonth() {
        String month = (String)getAttributeInternal(MONTH);
        return month;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Month.
     * @param value value to set the  Month
     */
    public void setMonth(String value) {
        setAttributeInternal(MONTH, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Year.
     * @return the Year
     */
    public String getYear() {
        return (String)getAttributeInternal(YEAR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Year.
     * @param value value to set the  Year
     */
    public void setYear(String value) {
        setAttributeInternal(YEAR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MonthCode.
     * @return the MonthCode
     */
    public String getMonthCode() {
        return (String) getAttributeInternal(MONTHCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MonthCode.
     * @param value value to set the  MonthCode
     */
    public void setMonthCode(String value) {
        setAttributeInternal(MONTHCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ShortLeavesColumn.
     * @return the ShortLeavesColumn
     */
    public BigDecimal getShortLeavesColumn() {
        BigDecimal bdIsShort = BigDecimal.valueOf(0);
        if (getEffectiveWorkedHours() != null) {
            String effectiveWorkedHours = getEffectiveWorkedHours();
            int effectiveWorkedMins =
                (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
                Integer.parseInt(effectiveWorkedHours.split(":")[1]);
            int expectedWorkedMins = Integer.parseInt(getExpectedWorkHours()) * 60;
            int missingMins = expectedWorkedMins - effectiveWorkedMins;
            if (missingMins > 30 && missingMins <= 90) {
                bdIsShort = BigDecimal.valueOf(1);
            }
        } else {
            bdIsShort = BigDecimal.valueOf(0);
        }
        return bdIsShort;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ShortLeavesColumn.
     * @param value value to set the  ShortLeavesColumn
     */
    public void setShortLeavesColumn(BigDecimal value) {
        setAttributeInternal(SHORTLEAVESCOLUMN, value);
    }


    /**
     * Gets the attribute value for the calculated attribute HalfCasualApprovedColumn.
     * @return the HalfCasualApprovedColumn
     */
    public BigDecimal getHalfCasualApprovedColumn() {
        BigDecimal bdIsHalfCasualApproved = BigDecimal.valueOf(0);

        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 90 && missingMins <= 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("Y") &&
                    String.valueOf(getLeaveTypeId()).equals("1")) {
                    bdIsHalfCasualApproved = BigDecimal.valueOf(1);
                } else {
                    bdIsHalfCasualApproved = BigDecimal.valueOf(0);
                }
            } else {
                bdIsHalfCasualApproved = BigDecimal.valueOf(0);
            }
        }
        return bdIsHalfCasualApproved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HalfCasualApprovedColumn.
     * @param value value to set the  HalfCasualApprovedColumn
     */
    public void setHalfCasualApprovedColumn(BigDecimal value) {
        setAttributeInternal(HALFCASUALAPPROVEDCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HalfCasualDisapprovedColumn.
     * @return the HalfCasualDisapprovedColumn
     */
    public BigDecimal getHalfCasualDisapprovedColumn() {
        BigDecimal bdIsHalfCasualDisapproved = BigDecimal.valueOf(0);
        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 90 && missingMins <= 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("N") &&
                    String.valueOf(getLeaveTypeId()).equals("1")) {
                    bdIsHalfCasualDisapproved = BigDecimal.valueOf(1);
                } else {
                    bdIsHalfCasualDisapproved = BigDecimal.valueOf(0);
                }
            } else {
                bdIsHalfCasualDisapproved = BigDecimal.valueOf(0);
            }
        }

        return bdIsHalfCasualDisapproved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HalfCasualDisapprovedColumn.
     * @param value value to set the  HalfCasualDisapprovedColumn
     */
    public void setHalfCasualDisapprovedColumn(BigDecimal value) {
        setAttributeInternal(HALFCASUALDISAPPROVEDCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HalfCasualPendingColumn.
     * @return the HalfCasualPendingColumn
     */
    public BigDecimal getHalfCasualPendingColumn() {
        BigDecimal bdIsHalfCasualDisapproved = BigDecimal.valueOf(0);
        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 90 && missingMins <= 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("U") &&
                    String.valueOf(getLeaveTypeId()).equals("1")) {
                    bdIsHalfCasualDisapproved = BigDecimal.valueOf(1);
                } else {
                    bdIsHalfCasualDisapproved = BigDecimal.valueOf(0);
                }
            } else {
                bdIsHalfCasualDisapproved = BigDecimal.valueOf(0);
            }
        }

        return bdIsHalfCasualDisapproved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HalfCasualPendingColumn.
     * @param value value to set the  HalfCasualPendingColumn
     */
    public void setHalfCasualPendingColumn(BigDecimal value) {
        setAttributeInternal(HALFCASUALPENDINGCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CasualApprovedColumn.
     * @return the CasualApprovedColumn
     */
    public BigDecimal getCasualApprovedColumn() {
        BigDecimal bdIsCasualApproved = BigDecimal.valueOf(0);

        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("Y") &&
                    String.valueOf(getLeaveTypeId()).equals("1")) {
                    bdIsCasualApproved = BigDecimal.valueOf(1);
                } else {
                    bdIsCasualApproved = BigDecimal.valueOf(0);
                }
            } else {
                bdIsCasualApproved = BigDecimal.valueOf(0);
            }
        }
        return bdIsCasualApproved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CasualApprovedColumn.
     * @param value value to set the  CasualApprovedColumn
     */
    public void setCasualApprovedColumn(BigDecimal value) {
        setAttributeInternal(CASUALAPPROVEDCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CasualDisapprovedColumn.
     * @return the CasualDisapprovedColumn
     */
    public BigDecimal getCasualDisapprovedColumn() {
        BigDecimal bdIsCasualApproved = BigDecimal.valueOf(0);

        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("N") &&
                    String.valueOf(getLeaveTypeId()).equals("1")) {
                    bdIsCasualApproved = BigDecimal.valueOf(1);
                } else {
                    bdIsCasualApproved = BigDecimal.valueOf(0);
                }
            } else {
                bdIsCasualApproved = BigDecimal.valueOf(0);
            }
        }
        return bdIsCasualApproved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CasualDisapprovedColumn.
     * @param value value to set the  CasualDisapprovedColumn
     */
    public void setCasualDisapprovedColumn(BigDecimal value) {
        setAttributeInternal(CASUALDISAPPROVEDCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CasualPendingColumn.
     * @return the CasualPendingColumn
     */
    public BigDecimal getCasualPendingColumn() {
        BigDecimal bdIsCasualApproved = BigDecimal.valueOf(0);
        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("U") &&
                    String.valueOf(getLeaveTypeId()).equals("1")) {
                    bdIsCasualApproved = BigDecimal.valueOf(1);
                } else {
                    bdIsCasualApproved = BigDecimal.valueOf(0);
                }
            } else {
                bdIsCasualApproved = BigDecimal.valueOf(0);
            }
        }
        return bdIsCasualApproved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CasualPendingColumn.
     * @param value value to set the  CasualPendingColumn
     */
    public void setCasualPendingColumn(BigDecimal value) {
        setAttributeInternal(CASUALPENDINGCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HalfAnnualApprovedColumn.
     * @return the HalfAnnualApprovedColumn
     */
    public BigDecimal getHalfAnnualApprovedColumn() {
        BigDecimal bdIsHalfAnnualApproved = BigDecimal.valueOf(0);

        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 90 && missingMins <= 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("Y") &&
                    String.valueOf(getLeaveTypeId()).equals("2")) {
                    bdIsHalfAnnualApproved = BigDecimal.valueOf(1);
                } else {
                    bdIsHalfAnnualApproved = BigDecimal.valueOf(0);
                }
            } else {
                bdIsHalfAnnualApproved = BigDecimal.valueOf(0);
            }
        }
        return bdIsHalfAnnualApproved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HalfAnnualApprovedColumn.
     * @param value value to set the  HalfAnnualApprovedColumn
     */
    public void setHalfAnnualApprovedColumn(BigDecimal value) {
        setAttributeInternal(HALFANNUALAPPROVEDCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HalfAnnualDisapprovedColumn.
     * @return the HalfAnnualDisapprovedColumn
     */
    public BigDecimal getHalfAnnualDisapprovedColumn() {
        BigDecimal bdIsHalfAnnualDispproved = BigDecimal.valueOf(0);

        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 90 && missingMins <= 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("N") &&
                    String.valueOf(getLeaveTypeId()).equals("2")) {
                    bdIsHalfAnnualDispproved = BigDecimal.valueOf(1);
                } else {
                    bdIsHalfAnnualDispproved = BigDecimal.valueOf(0);
                }
            } else {
                bdIsHalfAnnualDispproved = BigDecimal.valueOf(0);
            }
        }
        return bdIsHalfAnnualDispproved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HalfAnnualDisapprovedColumn.
     * @param value value to set the  HalfAnnualDisapprovedColumn
     */
    public void setHalfAnnualDisapprovedColumn(BigDecimal value) {
        setAttributeInternal(HALFANNUALDISAPPROVEDCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HalfAnnualPendingColumn.
     * @return the HalfAnnualPendingColumn
     */
    public BigDecimal getHalfAnnualPendingColumn() {
        BigDecimal bdIsHalfAnnualPending = BigDecimal.valueOf(0);

        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 90 && missingMins <= 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("U") &&
                    String.valueOf(getLeaveTypeId()).equals("2")) {
                    bdIsHalfAnnualPending = BigDecimal.valueOf(1);
                } else {
                    bdIsHalfAnnualPending = BigDecimal.valueOf(0);
                }
            } else {
                bdIsHalfAnnualPending = BigDecimal.valueOf(0);
            }
        }
        return bdIsHalfAnnualPending;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HalfAnnualPendingColumn.
     * @param value value to set the  HalfAnnualPendingColumn
     */
    public void setHalfAnnualPendingColumn(BigDecimal value) {
        setAttributeInternal(HALFANNUALPENDINGCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AnnualApprovedColumn.
     * @return the AnnualApprovedColumn
     */
    public BigDecimal getAnnualApprovedColumn() {
        BigDecimal bdIsAnnualApproved = BigDecimal.valueOf(0);

        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("Y") &&
                    String.valueOf(getLeaveTypeId()).equals("2")) {
                    bdIsAnnualApproved = BigDecimal.valueOf(1);
                } else {
                    bdIsAnnualApproved = BigDecimal.valueOf(0);
                }
            } else {
                bdIsAnnualApproved = BigDecimal.valueOf(0);
            }
        }
        return bdIsAnnualApproved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AnnualApprovedColumn.
     * @param value value to set the  AnnualApprovedColumn
     */
    public void setAnnualApprovedColumn(BigDecimal value) {
        setAttributeInternal(ANNUALAPPROVEDCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AnnualDisapprovedColumn.
     * @return the AnnualDisapprovedColumn
     */
    public BigDecimal getAnnualDisapprovedColumn() {
        BigDecimal bdIsAnnualDispproved = BigDecimal.valueOf(0);

        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("N") &&
                    String.valueOf(getLeaveTypeId()).equals("2")) {
                    bdIsAnnualDispproved = BigDecimal.valueOf(1);
                } else {
                    bdIsAnnualDispproved = BigDecimal.valueOf(0);
                }
            } else {
                bdIsAnnualDispproved = BigDecimal.valueOf(0);
            }
        }
        return bdIsAnnualDispproved;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AnnualDisapprovedColumn.
     * @param value value to set the  AnnualDisapprovedColumn
     */
    public void setAnnualDisapprovedColumn(BigDecimal value) {
        setAttributeInternal(ANNUALDISAPPROVEDCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AnnualPendingColumn.
     * @return the AnnualPendingColumn
     */
    public BigDecimal getAnnualPendingColumn() {
        BigDecimal bdIsAnnualPending = BigDecimal.valueOf(0);

        String effectiveWorkedHours =
            getEffectiveWorkedHours() == null ? "0:00" :
            getEffectiveWorkedHours();
        int effectiveWorkedMins =
            (Integer.parseInt(effectiveWorkedHours.split(":")[0]) * 60) +
            Integer.parseInt(effectiveWorkedHours.split(":")[1]);
        int expectedWorkedMins = (Integer.parseInt(getExpectedWorkHours()) * 60);
        int missingMins = expectedWorkedMins - effectiveWorkedMins;
        if (missingMins > 240) {
            if (getLeaveApprovedFlag() != null && getLeaveTypeId() != null) {
                if (getLeaveApprovedFlag().equals("U") &&
                    String.valueOf(getLeaveTypeId()).equals("2")) {
                    bdIsAnnualPending = BigDecimal.valueOf(1);
                } else {
                    bdIsAnnualPending = BigDecimal.valueOf(0);
                }
            } else {
                bdIsAnnualPending = BigDecimal.valueOf(0);
            }
        }
        return bdIsAnnualPending;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AnnualPendingColumn.
     * @param value value to set the  AnnualPendingColumn
     */
    public void setAnnualPendingColumn(BigDecimal value) {
        setAttributeInternal(ANNUALPENDINGCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ExceptionApprovedColumn.
     * @return the ExceptionApprovedColumn
     */
    public BigDecimal getExceptionApprovedColumn() {
        BigDecimal bdIsException = BigDecimal.valueOf(0);

        if (getPolicyExceptionApprovedFlag() != null) {
            if (getPolicyExceptionApprovedFlag().equals("Y")) {
                bdIsException = BigDecimal.valueOf(1);
            } else {
                bdIsException = BigDecimal.valueOf(0);
            }
        } else {
            bdIsException = BigDecimal.valueOf(0);
        }

        return bdIsException;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ExceptionApprovedColumn.
     * @param value value to set the  ExceptionApprovedColumn
     */
    public void setExceptionApprovedColumn(BigDecimal value) {
        setAttributeInternal(EXCEPTIONAPPROVEDCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ExceptionDisapprovedColumn.
     * @return the ExceptionDisapprovedColumn
     */
    public BigDecimal getExceptionDisapprovedColumn() {
        BigDecimal bdIsException = BigDecimal.valueOf(0);

        if (getPolicyExceptionApprovedFlag() != null) {
            if (getPolicyExceptionApprovedFlag().equals("N")) {
                bdIsException = BigDecimal.valueOf(1);
            } else {
                bdIsException = BigDecimal.valueOf(0);
            }
        } else {
            bdIsException = BigDecimal.valueOf(0);
        }

        return bdIsException;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ExceptionDisapprovedColumn.
     * @param value value to set the  ExceptionDisapprovedColumn
     */
    public void setExceptionDisapprovedColumn(BigDecimal value) {
        setAttributeInternal(EXCEPTIONDISAPPROVEDCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ExceptionPendingColumn.
     * @return the ExceptionPendingColumn
     */
    public BigDecimal getExceptionPendingColumn() {
        BigDecimal bdIsException = BigDecimal.valueOf(0);

        if (getPolicyExceptionApprovedFlag() != null) {
            if (getPolicyExceptionApprovedFlag().equals("U")) {
                bdIsException = BigDecimal.valueOf(1);
            } else {
                bdIsException = BigDecimal.valueOf(0);
            }
        } else {
            bdIsException = BigDecimal.valueOf(0);
        }

        return bdIsException;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ExceptionPendingColumn.
     * @param value value to set the  ExceptionPendingColumn
     */
    public void setExceptionPendingColumn(BigDecimal value) {
        setAttributeInternal(EXCEPTIONPENDINGCOLUMN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Remarks.
     * @return the Remarks
     */
    public String getRemarks() {
        StringBuilder remarks = new StringBuilder();
        if (getPolicyException() != null) {

            if (getPolicyExceptionApprovedFlag().equals("Y")) {
                remarks.append("Approved Exception: ");
            } else if (getPolicyExceptionApprovedFlag().equals("N")) {
                remarks.append("Disapproved Exception: '");
            } else if (getPolicyExceptionApprovedFlag().equals("U")) {
                remarks.append("Pending Exception: ");
            }
            remarks.append(getPolicyException().toString());
        } else if (getLeaveTypeId() != null) {
            if (getIsHalf().equals("Y")) {
                if (getLeaveApprovedFlag().equals("Y")) {
                    remarks.append("Approved Half ");
                } else if (getLeaveApprovedFlag().equals("N")) {
                    remarks.append("Disapproved Half ");
                } else if (getLeaveApprovedFlag().equals("U")) {
                    remarks.append("Pending Half ");
                }
                if (getLeaveTypeId().intValue()==1) {
                    remarks.append("Casual");
                }else if (getLeaveTypeId().intValue()==2) {
                    remarks.append("Annual");
                }
            } else if (getIsHalf().equals("N")) {
                if (getLeaveApprovedFlag().equals("Y")) {
                    remarks.append("Approved ");
                } else if (getLeaveApprovedFlag().equals("N")) {
                    remarks.append("Disapproved ");
                } else if (getLeaveApprovedFlag().equals("U")) {
                    remarks.append("Pending ");
                }
                if (getLeaveTypeId().intValue()==1) {
                    remarks.append("Casual");
                }else if (getLeaveTypeId().intValue()==2) {
                    remarks.append("Annual");
                }
            }
        }
        return remarks.toString();
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Remarks.
     * @param value value to set the  Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute saturdayOrHoliday.
     * @return the saturdayOrHoliday
     */
    public String getsaturdayOrHoliday() {
        
        String saturdayOrHoliday =
            getDescription() == null ? "" : getDescription().equals("SATURDAY_OFF") ?
                                            "Saturday Off" :
                                            getDescription().equals("SATURDAY_ON") ?
                                            "" : getDescription();
        return saturdayOrHoliday;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute saturdayOrHoliday.
     * @param value value to set the  saturdayOrHoliday
     */
    public void setsaturdayOrHoliday(String value) {
        setAttributeInternal(SATURDAYORHOLIDAY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute isSunday.
     * @return the isSunday
     */
    public String getisSunday() {
        String sunday = getDayOfWeek().equals("SUN")?"Sunday Off":"";
        return sunday;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute isSunday.
     * @param value value to set the  isSunday
     */
    public void setisSunday(String value) {
        setAttributeInternal(ISSUNDAY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute isLeave.
     * @return the isLeave
     */
    public String getisLeave() {
        String leave = getLeaveToday()==null?"":getLeaveToday().equals("Y")?getTypeOfLeave().equals("1")?"Casual Leave":getTypeOfLeave().equals("2")?"Annual Leave":"":"";                                                                                        
        return leave;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute isLeave.
     * @param value value to set the  isLeave
     */
    public void setisLeave(String value) {
        setAttributeInternal(ISLEAVE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MissingTime.
     * @return the MissingTime
     */
    public String getMissingTime() {
            if (getEffectiveWorkedHours() != null) {
                int workedMinutes = (Integer.parseInt( getEffectiveWorkedHours().split(":")[0])*60)+
                    Integer.parseInt( getEffectiveWorkedHours().split(":")[1]);

                int expectedMinutes = (Integer.parseInt(getExpectedWorkHours().toString().split(":")[0])*60)+
                                      Integer.parseInt(getWorkingTime().split(":")[1]);
            
                int missingMinutes = (expectedMinutes - workedMinutes)<0?0:(expectedMinutes - workedMinutes);
                return missingMinutes+"";
            }else{
                //EMPLOYEE HASN'T DONE ANYTHING ON THIS DAY
                return null;
            }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MissingTime.
     * @param value value to set the  MissingTime
     */
    public void setMissingTime(String value) {
        setAttributeInternal(MISSINGTIME, value);
    }

    /**
     * Gets the attribute value for LEAVE_TODAY using the alias name LeaveToday.
     * @return the LEAVE_TODAY
     */
    public String getLeaveToday() {
        return (String) getAttributeInternal(LEAVETODAY);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVE_TODAY using the alias name LeaveToday.
     * @param value value to set the LEAVE_TODAY
     */
    public void setLeaveToday(String value) {
        setAttributeInternal(LEAVETODAY, value);
    }

    /**
     * Gets the attribute value for TYPE_OF_LEAVE using the alias name TypeOfLeave.
     * @return the TYPE_OF_LEAVE
     */
    public Number getTypeOfLeave() {
        return (Number) getAttributeInternal(TYPEOFLEAVE);
    }

    /**
     * Sets <code>value</code> as attribute value for TYPE_OF_LEAVE using the alias name TypeOfLeave.
     * @param value value to set the TYPE_OF_LEAVE
     */
    public void setTypeOfLeave(Number value) {
        setAttributeInternal(TYPEOFLEAVE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LeaveCancelled.
     * @return the LeaveCancelled
     */
    public String getLeaveCancelled() {
        return (String) getAttributeInternal(LEAVECANCELLED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LeaveCancelled.
     * @param value value to set the  LeaveCancelled
     */
    public void setLeaveCancelled(String value) {
        setAttributeInternal(LEAVECANCELLED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmpType.
     * @return the EmpType
     */
    public Number getEmpType() {
        return (Number) getAttributeInternal(EMPTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmpType.
     * @param value value to set the  EmpType
     */
    public void setEmpType(Number value) {
        setAttributeInternal(EMPTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WorkingTime.
     * @return the WorkingTime
     */
    public String getWorkingTime() {
        return (String) getAttributeInternal(WORKINGTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WorkingTime.
     * @param value value to set the  WorkingTime
     */
    public void setWorkingTime(String value) {
        setAttributeInternal(WORKINGTIME, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link VO_ActiveEmployees.
     */
    public Row getVO_ActiveEmployees() {
        return (Row)getAttributeInternal(VO_ACTIVEEMPLOYEES);
    }

    /**
     * Sets the master-detail link VO_ActiveEmployees between this object and <code>value</code>.
     */
    public void setVO_ActiveEmployees(Row value) {
        setAttributeInternal(VO_ACTIVEEMPLOYEES, value);
    }


    /**
     * Gets the associated <code>RowIterator</code> using master-detail link VO_ConsumedLeaves.
     */
    public RowIterator getVO_ConsumedLeaves() {
        return (RowIterator)getAttributeInternal(VO_CONSUMEDLEAVES);
    }


    /**
     * Gets the associated <code>RowIterator</code> using master-detail link VO_EmpIRR.
     */
    public RowIterator getVO_EmpIRR() {
        return (RowIterator)getAttributeInternal(VO_EMPIRR);
    }


    /**
     * Gets the associated <code>RowIterator</code> using master-detail link VO_PARTTIMES.
     */
    public RowIterator getVO_PARTTIMES() {
        return (RowIterator)getAttributeInternal(VO_PARTTIMES);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link VO_MISSING_MINUTES.
     */
    public RowIterator getVO_MISSING_MINUTES() {
        return (RowIterator)getAttributeInternal(VO_MISSING_MINUTES);
    }

    /**
     * Gets the view accessor <code>RowSet</code> YearLov1.
     */
    public RowSet getYearLov1() {
        return (RowSet)getAttributeInternal(YEARLOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> VO_Months1.
     */
    public RowSet getVO_Months1() {
        return (RowSet)getAttributeInternal(VO_MONTHS1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> VO_Years1.
     */
    public RowSet getVO_Years1() {
        return (RowSet)getAttributeInternal(VO_YEARS1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
